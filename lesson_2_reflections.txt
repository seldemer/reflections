
What happens when you initialize a repository? Why do you need to do it?

A .git directory is created which will contain the info on future commits and changes. The initialization is necessary to create the Git repository that will contain the version history.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The working directory is the directory and all of its contents. The staging area is part of Git and does not contain the files which have not been added, and the repository contains commits. The staging area is useful for getting files set up to do a commit.


How can you use the staging area to make sure you have one commit per logical change?

By using add you can specify just the files for each commit, in case there are other changed files that should be in another commit. Use git diff to help decide on the commit point and git add to set it up. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

One situation is where you want to try an experimental change. Another would be an alternate version of the program. The branches help by allowing you to easily go back to the main version, or to merge it with your experiment later if it works.


How do the diagrams help you visualize the branch structure?

It gives a visual indication of reachability and any unreachable commits.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The merge combines the changes in all the commits on both branches, and adds a new commit to the current branch. The way it is represented in the diagram indicates that all of the commits from both branches still exist and are accessible in the current branch from now on.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The pro is that Git's automatic merging speeds up the process as long as there are no conflicts. The con is that if there is a conflict, Git always punts and you have to resolve it manually.
